{"title":"$:/plugins/D&DTools/d20.js","author":"Matt Lauber & Tactical Tokens","description":"Dice roller plugin","list":"","plugin-priority":"1","plugin-type":"plugin","version":"1.1.0","tags":"[[D&D]]","source":"https://github.com/mklauber/tiddly-dice","summary":"Plugin for interpreting dice rolls","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"/home/runner/work/tw5-plugins/tw5-plugins/node_modules/tiddlywiki/plugins/mklauber/tiddly-dice/LICENSE\":{\"title\":\"/home/runner/work/tw5-plugins/tw5-plugins/node_modules/tiddlywiki/plugins/mklauber/tiddly-dice/LICENSE\",\"text\":\"MIT License\\n\\nCopyright (c) 2020 Matt Lauber\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\"type\":\"text/plain\"},\"$:/plugins/D&DTools/d20.js/roll.js\":{\"title\":\"$:/plugins/D&DTools/d20.js/roll.js\",\"module-type\":\"widget\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/plugins/D&DTools/d20.js/roll.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nText node widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar d20 = require(\\\"$:/plugins/D&DTools/d20.js/d20.js\\\");\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RollWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRollWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRollWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\n\\tthis.expression = this.document.createElement(\\\"div\\\");\\n\\tthis.renderChildren(this.expression);\\n\\t\\n\\tvar text = \\\"\\\";\\n\\ttry {\\n\\t\\tswitch (this.output) {\\n\\t\\t\\tcase \\\"combo\\\":\\n\\t\\t\\t\\ttext = d20.comboRoll(this.expression.textContent.trim());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"verbose\\\":\\n\\t\\t\\t\\ttext = d20.verboseRoll(this.expression.textContent.trim());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\ttext = d20.roll(this.expression.textContent.trim());\\n\\t\\t}\\n\\t\\t\\n\\t} catch(err) {\\n\\t\\tif(!this.silence){\\n\\t\\t\\ttext = \\\"Unable to parse '\\\" + this.expression.textContent + \\\"'\\\";\\n\\t\\t}\\n\\t}\\n\\tvar textNode = this.document.createTextNode(text);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRollWidget.prototype.execute = function() {\\n\\tthis.silence = this.getAttribute(\\\"silence\\\",false);\\n\\tthis.output = this.getAttribute(\\\"format\\\",false);\\n\\tvar diceroll = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"div\\\",\\n\\t\\tchildren: this.parseTreeNode.children\\n\\t};\\n\\tthis.makeChildWidgets([diceroll]);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRollWidget.prototype.refresh = function(changedTiddlers) {\\n\\tif(this.refreshChildren(changedTiddlers)) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\\n\\nexports.diceroll = RollWidget;\\n\\n})();\\n\"},\"$:/plugins/D&DTools/d20.js/d20.js\":{\"title\":\"$:/plugins/D&DTools/d20.js/d20.js\",\"module-type\":\"library\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/plugins/D&DTools/d20.js/d20.js\\ntype: application/javascript\\nmodule-type: library\\n\\\\*/\\n/**\\n * d20.js\\n *\\n * Javascript library for rolling dice. Supports strings written in a dice-rolling syntax, eg. \\\"d20\\\", \\\"4d6\\\", \\\"1d8+1\\\".\\n *\\n * @author Michael Enger <mike@thelonelycoder.com>\\n * @licence MIT\\n */\\n(function() {\\n\\\"use strict\\\";\\n\\nvar d20 = {\\n\\n    /**\\n     * Roll a number of dice and return the result.\\n     *\\n     * @param dice Type of dice to roll, can be represented in various formats:\\n     *               - a number (6, 12, 42)\\n     *               - dice syntax (d20, 4d6, 2d8+2)\\n     * @param verbose Whether or not all dice rolls should be returned as an array\\n     * @return Number|Array\\n     */\\n    roll: function(dice, verbose) {\\n        var result = d20.verboseRoll(dice),\\n            num = 0;\\n\\n        if(verbose) {\\n            return result;\\n        } else {\\n            for (var i in result) {\\n                num += result[i];\\n            }\\n\\n            return num;\\n        }\\n    },\\n    \\n    comboRoll: function (dice, verbose) {\\n        var result = d20.verboseRoll(dice),\\n            num = 0;\\n\\n        if(verbose) {\\n            return result;\\n        } else {\\n            for (var i in result) {\\n                num += result[i];\\n            }\\n\\n            return num + \\\" ( \\\" + result + \\\" )\\\";\\n        }\\n    },\\n\\n    /**\\n     * Roll a number of dice and return the result as an array.\\n     *\\n     * @param dice Type of dice to roll, can be represented in various formats:\\n     *               - a number (6, 12, 42)\\n     *               - dice syntax (d20, 4d6, 2d8+2)\\n     * @return Array\\n     */\\n    verboseRoll: function(dice) {\\n        var amount = 1,\\n            mod = 0,\\n            results = [],\\n            match,\\n            num,\\n            modifiers;\\n\\n        if (!dice) {\\n            throw new Error('Missing dice parameter.');\\n        }\\n\\n        if (typeof dice == 'string') {\\n            match = dice.match(/^\\\\s*(\\\\d+)?\\\\s*d\\\\s*(\\\\d+)\\\\s*(.*?)\\\\s*$/);\\n            if (match) {\\n                if (match[1]) {\\n                    amount = parseInt(match[1]);\\n                }\\n                if (match[2]) {\\n                    dice = parseInt(match[2]);\\n                }\\n                if (match[3]) {\\n                    modifiers = match[3].match(/([+-]\\\\s*\\\\d+)/g);\\n                    for (var i = 0; i < modifiers.length; i++) {\\n                        mod += parseInt(modifiers[i].replace(/\\\\s/g, ''));\\n                    }\\n                }\\n            } else {\\n                parseInt(dice);\\n            }\\n        }\\n\\n        if (isNaN(dice)) {\\n            return [];\\n        }\\n\\n        for (var i = 0; i < amount; i++) {\\n            /* We dont want to ruin verbose, so we dont skip the for loop */\\n            if(dice !== 0){\\n                num = Math.floor(Math.random() * dice + 1);\\n            }else{\\n                num = 0;\\n            }\\n            results.push(num);\\n        }\\n\\n        results = results.sort(function(a, b) {\\n            return a - b;\\n        });\\n        if (mod != 0) {\\n            results.push(mod);\\n        }\\n\\n        return results;\\n    }\\n};\\n\\n\\nif (typeof exports != 'undefined') {\\n    for (var k in d20) {\\n        exports[k] = d20[k];\\n    }\\n}\\n\\n})();\\n\"}}}"}