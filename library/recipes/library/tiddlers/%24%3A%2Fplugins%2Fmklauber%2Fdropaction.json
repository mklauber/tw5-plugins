{"title":"$:/plugins/mklauber/dropaction","description":"DropAction Widget","author":"Matthew Lauber","version":"1.1.2","core-version":">=5.0.0","plugin-type":"plugin","list":"Readme","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/mklauber/dropaction/Readme\":{\"title\":\"$:/plugins/mklauber/dropaction/Readme\",\"created\":\"20160309192429006\",\"modified\":\"20160309192622162\",\"tags\":\"\",\"text\":\"The purpose of this plugin is to add a new widget <$dropaction> that allows users to drag a link onto text and have actions be run with the link's tiddler as the currentTiddler.\\n\"},\"$:/plugins/mklauber/dropaction/dropaction.js\":{\"title\":\"$:/plugins/mklauber/dropaction/dropaction.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/mklauber/dropaction/dropaction.js\\ntype: application/javascript\\nmodule-type: widget\\nDropzone widget\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DropActionWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDropActionWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDropActionWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\tvar domNode = this.document.createElement(\\\"span\\\");\\n\\tdomNode.className = \\\"tc-dropzone\\\";\\n\\t// Add event handlers\\n\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t{name: \\\"dragenter\\\", handlerObject: this, handlerMethod: \\\"handleDragEnterEvent\\\"},\\n\\t\\t{name: \\\"dragover\\\", handlerObject: this, handlerMethod: \\\"handleDragOverEvent\\\"},\\n\\t\\t{name: \\\"dragleave\\\", handlerObject: this, handlerMethod: \\\"handleDragLeaveEvent\\\"},\\n\\t\\t{name: \\\"drop\\\", handlerObject: this, handlerMethod: \\\"handleDropEvent\\\"},\\n\\t]);\\n\\tdomNode.addEventListener(\\\"click\\\",function (event) {\\n\\t},false);\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nDropActionWidget.prototype.enterDrag = function() {\\n\\t// Check for this window being the source of the drag\\n\\tif(!$tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\t// We count enter/leave events\\n\\tthis.dragEnterCount = (this.dragEnterCount || 0) + 1;\\n\\t// If we're entering for the first time we need to apply highlighting\\n\\tif(this.dragEnterCount === 1) {\\n\\t\\t$tw.utils.addClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\t}\\n};\\n\\nDropActionWidget.prototype.leaveDrag = function() {\\n\\t// Reduce the enter count\\n\\tthis.dragEnterCount = (this.dragEnterCount || 0) - 1;\\n\\t// Remove highlighting if we're leaving externally\\n\\tif(this.dragEnterCount <= 0) {\\n\\t\\t$tw.utils.removeClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\t}\\n};\\n\\nDropActionWidget.prototype.handleDragEnterEvent  = function(event) {\\n\\tthis.enterDrag();\\n\\t// Tell the browser that we're ready to handle the drop\\n\\tevent.preventDefault();\\n\\t// Tell the browser not to ripple the drag up to any parent drop handlers\\n\\tevent.stopPropagation();\\n};\\n\\nDropActionWidget.prototype.handleDragOverEvent  = function(event) {\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Check for this window being the source of the drag\\n\\tif(!$tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Tell the browser that we're still interested in the drop\\n\\tevent.preventDefault();\\n\\tevent.dataTransfer.dropEffect = \\\"copy\\\"; // Explicitly show this is a copy\\n};\\n\\nDropActionWidget.prototype.handleDragLeaveEvent  = function(event) {\\n\\tthis.leaveDrag();\\n};\\n\\nDropActionWidget.prototype.handleDropEvent  = function(event) {\\n\\tthis.leaveDrag();\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Check for this window being the source of the drag\\n\\tif(!$tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\t// Reset the enter count\\n\\tthis.dragEnterCount = 0;\\n\\t\\n\\t// Remove highlighting\\n\\t$tw.utils.removeClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\n\\t// Try to import the various data types we understand\\n\\tvar tiddler = this.importData(event.dataTransfer);\\n\\t\\n\\tthis.setVariable(\\\"droppedTiddler\\\",tiddler.title);\\n\\tthis.refreshChildren({});\\n\\tthis.invokeActions(this,event);\\n   \\n\\t\\n\\t\\n\\t// Tell the browser that we handled the drop\\n\\tevent.preventDefault();\\n\\t// Stop the drop ripple up to any parent handlers\\n\\tevent.stopPropagation();\\n};\\n\\nDropActionWidget.prototype.importData = function(dataTransfer) {\\n\\t// Try each provided data type in turn\\n\\tfor(var t=0; t<this.importDataTypes.length; t++) {\\n\\t\\tif(!$tw.browser.isIE || this.importDataTypes[t].IECompatible) {\\n\\t\\t\\t// Get the data\\n\\t\\t\\tvar dataType = this.importDataTypes[t];\\n\\t\\t\\t\\tvar data = dataTransfer.getData(dataType.type);\\n\\t\\t\\t// Import the tiddlers in the data\\n\\t\\t\\tif(data !== \\\"\\\" && data !== null) {\\n\\t\\t\\t\\tif($tw.log.IMPORT) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"Importing data type '\\\" + dataType.type + \\\"', data: '\\\" + data + \\\"'\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar tiddlerFields = dataType.convertToFields(data);\\n\\t\\t\\t\\tif(!tiddlerFields.title) {\\n\\t\\t\\t\\t\\ttiddlerFields.title = this.wiki.generateNewTitle(\\\"Untitled\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn tiddlerFields;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nDropActionWidget.prototype.importDataTypes = [\\n\\t{type: \\\"text/vnd.tiddler\\\", IECompatible: false, convertToFields: function(data) {\\n\\t\\treturn JSON.parse(data);\\n\\t}},\\n\\t{type: \\\"URL\\\", IECompatible: true, convertToFields: function(data) {\\n\\t\\t// Check for tiddler data URI\\n\\t\\tvar match = decodeURIComponent(data).match(/^data\\\\:text\\\\/vnd\\\\.tiddler,(.*)/i);\\n\\t\\tif(match) {\\n\\t\\t\\treturn JSON.parse(match[1]);\\n\\t\\t} else {\\n\\t\\t\\treturn { // As URL string\\n\\t\\t\\t\\ttext: data\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}},\\n\\t{type: \\\"text/x-moz-url\\\", IECompatible: false, convertToFields: function(data) {\\n\\t\\t// Check for tiddler data URI\\n\\t\\tvar match = decodeURIComponent(data).match(/^data\\\\:text\\\\/vnd\\\\.tiddler,(.*)/i);\\n\\t\\tif(match) {\\n\\t\\t\\treturn JSON.parse(match[1]);\\n\\t\\t} else {\\n\\t\\t\\treturn { // As URL string\\n\\t\\t\\t\\ttext: data\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}},\\n\\t{type: \\\"text/html\\\", IECompatible: false, convertToFields: function(data) {\\n\\t\\treturn {\\n\\t\\t\\ttext: data\\n\\t\\t};\\n\\t}},\\n\\t{type: \\\"text/plain\\\", IECompatible: false, convertToFields: function(data) {\\n\\t\\treturn {\\n\\t\\t\\ttext: data\\n\\t\\t};\\n\\t}},\\n\\t{type: \\\"Text\\\", IECompatible: true, convertToFields: function(data) {\\n\\t\\treturn {\\n\\t\\t\\ttext: data\\n\\t\\t};\\n\\t}},\\n\\t{type: \\\"text/uri-list\\\", IECompatible: false, convertToFields: function(data) {\\n\\t\\treturn {\\n\\t\\t\\ttext: data\\n\\t\\t};\\n\\t}}\\n];\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDropActionWidget.prototype.execute = function() {\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDropActionWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.dropaction = DropActionWidget;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/fieldmangler.js\":{\"title\":\"$:/core/modules/widgets/fieldmangler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/fieldmangler.js\\ntype: application/javascript\\nmodule-type: widget\\nField mangler widget\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar FieldManglerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-remove-field\\\", handler: \\\"handleRemoveFieldEvent\\\"},\\n\\t\\t{type: \\\"tm-add-field\\\", handler: \\\"handleAddFieldEvent\\\"},\\n\\t\\t{type: \\\"tm-remove-tag\\\", handler: \\\"handleRemoveTagEvent\\\"},\\n\\t\\t{type: \\\"tm-add-tag\\\", handler: \\\"handleAddTagEvent\\\"}\\n\\t]);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nFieldManglerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nFieldManglerWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nFieldManglerWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.mangleTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nFieldManglerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\t\\t\\n\\t}\\n};\\n\\nFieldManglerWidget.prototype.handleRemoveFieldEvent = function(event) {\\n\\tvar tiddler;\\n\\tif(event.paramObject && event.paramObject.tiddler){\\n\\t\\ttiddler = this.wiki.getTiddler(event.paramObject.tiddler);\\n\\t}else {\\n\\t\\ttiddler = this.wiki.getTiddler(this.mangleTitle);\\n\\t}\\n\\tvar\\tdeletion = {};\\n\\tdeletion[event.param] = undefined;\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,deletion));\\n\\treturn true;\\n};\\n\\nFieldManglerWidget.prototype.handleAddFieldEvent = function(event) {\\n\\tvar tiddler;\\n\\tif(event.paramObject && event.paramObject.tiddler){\\n\\t\\ttiddler = this.wiki.getTiddler(event.paramObject.tiddler);\\n\\t}else {\\n\\t\\ttiddler = this.wiki.getTiddler(this.mangleTitle);\\n\\t}\\n\\tvar addition = this.wiki.getModificationFields(),\\n\\t\\thadInvalidFieldName = false,\\n\\t\\taddField = function(name,value) {\\n\\t\\t\\tvar trimmedName = name.toLowerCase().trim();\\n\\t\\t\\tif(!$tw.utils.isValidFieldName(trimmedName)) {\\n\\t\\t\\t\\tif(!hadInvalidFieldName) {\\n\\t\\t\\t\\t\\talert($tw.language.getString(\\n\\t\\t\\t\\t\\t\\t\\\"InvalidFieldName\\\",\\n\\t\\t\\t\\t\\t\\t{variables:\\n\\t\\t\\t\\t\\t\\t\\t{fieldName: trimmedName}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t));\\n\\t\\t\\t\\t\\thadInvalidFieldName = true;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(!value && tiddler) {\\n\\t\\t\\t\\t\\tvalue = tiddler.fields[trimmedName];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\taddition[trimmedName] = value || \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t\\treturn;\\n\\t\\t};\\n\\taddition.title = this.mangleTitle;\\n\\tif(typeof event.param === \\\"string\\\") {\\n\\t\\taddField(event.param,\\\"\\\");\\n\\t}\\n\\tif(typeof event.paramObject === \\\"object\\\") {\\n\\t\\tfor(var name in event.paramObject) {\\n\\t\\t\\taddField(name,event.paramObject[name]);\\n\\t\\t}\\n\\t}\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,addition));\\n\\treturn true;\\n};\\n\\nFieldManglerWidget.prototype.handleRemoveTagEvent = function(event) {\\n\\tvar tiddler;\\n\\tif(event.paramObject && event.paramObject.tiddler){\\n\\t\\ttiddler = this.wiki.getTiddler(event.paramObject.tiddler);\\n\\t}else {\\n\\t\\ttiddler = this.wiki.getTiddler(this.mangleTitle);\\n\\t}\\n\\t\\n\\tif(tiddler && tiddler.fields.tags) {\\n\\t\\tvar p = tiddler.fields.tags.indexOf(event.param);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tvar modification = this.wiki.getModificationFields();\\n\\t\\t\\tmodification.tags = (tiddler.fields.tags || []).slice(0);\\n\\t\\t\\tmodification.tags.splice(p,1);\\n\\t\\t\\tif(modification.tags.length === 0) {\\n\\t\\t\\t\\tmodification.tags = undefined;\\n\\t\\t\\t}\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n};\\n\\nFieldManglerWidget.prototype.handleAddTagEvent = function(event) {\\n\\tvar tiddler;\\n\\tif(event.paramObject && event.paramObject.tiddler){\\n\\t\\ttiddler = this.wiki.getTiddler(event.paramObject.tiddler);\\n\\t}else {\\n\\t\\ttiddler = this.wiki.getTiddler(this.mangleTitle);\\n\\t}\\n\\tif(tiddler && typeof event.param === \\\"string\\\") {\\n\\t\\tvar tag = event.param.trim();\\n\\t\\tif(tag !== \\\"\\\") {\\n\\t\\t\\tvar modification = this.wiki.getModificationFields();\\n\\t\\t\\tmodification.tags = (tiddler.fields.tags || []).slice(0);\\n\\t\\t\\t$tw.utils.pushTop(modification.tags,tag);\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\\t\\t\\t\\n\\t\\t}\\n\\t} else if(typeof event.param === \\\"string\\\" && event.param.trim() !== \\\"\\\" && this.mangleTitle.trim() !== \\\"\\\") {\\n\\t\\tvar tag = [];\\n\\t\\ttag.push(event.param.trim());\\n\\t\\tthis.wiki.addTiddler({title: this.mangleTitle, tags: tag});\\t\\t\\n\\t}\\n\\treturn true;\\n};\\n\\nexports.fieldmangler = FieldManglerWidget;\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}