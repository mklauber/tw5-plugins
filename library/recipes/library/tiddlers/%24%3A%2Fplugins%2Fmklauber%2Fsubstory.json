{"title":"$:/plugins/mklauber/substory","description":"Sane Substory Implementation","author":"Matthew Lauber","version":"2.0.2","core-version":">=5.0.0","plugin-type":"plugin","list":"readme","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/core/modules/parsers/wikiparser/rules/sublink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/sublink.js\",\"created\":\"20170614000913089\",\"modified\":\"20170614004852192\",\"module-type\":\"wikirule\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/prettylink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for pretty links. For example:\\n\\n```\\n[[Introduction]]\\n\\n[[Link description|TiddlerTitle]]\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"sublink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\[s(ub)?\\\\[(.*?)(?:\\\\|(.*?))?\\\\]\\\\]/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Process the link\\n\\tvar text = this.match[2],\\n\\t\\tlink = this.match[3] || text;\\n\\tif($tw.utils.isLinkExternal(link)) {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"a\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\thref: {type: \\\"string\\\", value: link},\\n\\t\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-tiddlylink-external\\\"},\\n\\t\\t\\t\\ttarget: {type: \\\"string\\\", value: \\\"_blank\\\"},\\n\\t\\t\\t\\trel: {type: \\\"string\\\", value: \\\"noopener noreferrer\\\"}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\", text: text\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t} else {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"sublink\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tto: {type: \\\"string\\\", value: link}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\", text: text\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t}\\n};\\n\\n})();\\n\"},\"$:/core/modules/widgets/sublink.js\":{\"title\":\"$:/core/modules/widgets/sublink.js\",\"created\":\"20170614001138729\",\"modified\":\"20170614132020014\",\"module-type\":\"widget\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/link.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nLink widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar MISSING_LINK_CONFIG_TITLE = \\\"$:/config/MissingLinks\\\";\\n\\nvar LinkWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nLinkWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLinkWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Get the value of the tv-wikilinks configuration macro\\n\\tvar wikiLinksMacro = this.getVariable(\\\"tv-wikilinks\\\"),\\n\\t\\tuseWikiLinks = wikiLinksMacro ? (wikiLinksMacro.trim() !== \\\"no\\\") : true,\\n\\t\\tmissingLinksEnabled = !(this.hideMissingLinks && this.isMissing && !this.isShadow);\\n\\t// Render the link if required\\n\\tif(useWikiLinks && missingLinksEnabled) {\\n\\t\\tthis.renderLink(parent,nextSibling);\\n\\t} else {\\n\\t\\t// Just insert the link text\\n\\t\\tvar domNode = this.document.createElement(\\\"span\\\");\\n\\t\\tparent.insertBefore(domNode,nextSibling);\\n\\t\\tthis.renderChildren(domNode,null);\\n\\t\\tthis.domNodes.push(domNode);\\n\\t}\\n};\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLinkWidget.prototype.renderLink = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Sanitise the specified tag\\n\\tvar tag = this.linkTag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n\\t\\ttag = \\\"a\\\";\\n\\t}\\n\\t// Create our element\\n\\tvar domNode = this.document.createElement(tag);\\n\\t// Assign classes\\n\\tvar classes = [];\\n\\tif(this.linkClasses) {\\n\\t\\tclasses.push(this.linkClasses);\\n\\t}\\n\\tclasses.push(\\\"tc-tiddlylink\\\");\\n\\tif(this.isShadow) {\\n\\t\\tclasses.push(\\\"tc-tiddlylink-shadow\\\");\\n\\t}\\n\\tif(this.isMissing && !this.isShadow) {\\n\\t\\tclasses.push(\\\"tc-tiddlylink-missing\\\");\\n\\t} else {\\n\\t\\tif(!this.isMissing) {\\n\\t\\t\\tclasses.push(\\\"tc-tiddlylink-resolves\\\");\\n\\t\\t}\\n\\t}\\n\\tdomNode.setAttribute(\\\"class\\\",classes.join(\\\" \\\"));\\n\\t// Set an href\\n\\tvar wikiLinkTemplateMacro = this.getVariable(\\\"tv-wikilink-template\\\"),\\n\\t\\twikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : \\\"#$uri_encoded$\\\",\\n\\t\\twikiLinkText = $tw.utils.replaceString(wikiLinkTemplate,\\\"$uri_encoded$\\\",encodeURIComponent(this.to));\\n\\twikiLinkText = $tw.utils.replaceString(wikiLinkText,\\\"$uri_doubleencoded$\\\",encodeURIComponent(encodeURIComponent(this.to)));\\n\\twikiLinkText = this.getVariable(\\\"tv-get-export-link\\\",{params: [{name: \\\"to\\\",value: this.to}],defaultValue: wikiLinkText});\\n\\tif(tag === \\\"a\\\") {\\n\\t\\tdomNode.setAttribute(\\\"href\\\",wikiLinkText);\\n\\t}\\n\\tif(this.tabIndex) {\\n\\t\\tdomNode.setAttribute(\\\"tabindex\\\",this.tabIndex);\\n\\t}\\n\\t// Set the tooltip\\n\\t// HACK: Performance issues with re-parsing the tooltip prevent us defaulting the tooltip to \\\"<$transclude field='tooltip'><$transclude field='title'/></$transclude>\\\"\\n\\tvar tooltipWikiText = this.tooltip || this.getVariable(\\\"tv-wikilink-tooltip\\\");\\n\\tif(tooltipWikiText) {\\n\\t\\tvar tooltipText = this.wiki.renderText(\\\"text/plain\\\",\\\"text/vnd.tiddlywiki\\\",tooltipWikiText,{\\n\\t\\t\\t\\tparseAsInline: true,\\n\\t\\t\\t\\tvariables: {\\n\\t\\t\\t\\t\\tcurrentTiddler: this.to\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tparentWidget: this\\n\\t\\t\\t});\\n\\t\\tdomNode.setAttribute(\\\"title\\\",tooltipText);\\n\\t}\\n\\tif(this[\\\"aria-label\\\"]) {\\n\\t\\tdomNode.setAttribute(\\\"aria-label\\\",this[\\\"aria-label\\\"]);\\n\\t}\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t{name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleClickEvent\\\"},\\n\\t]);\\n\\t// Make the link draggable if required\\n\\tif(this.draggable === \\\"yes\\\") {\\n\\t\\t$tw.utils.makeDraggable({\\n\\t\\t\\tdomNode: domNode,\\n\\t\\t\\tdragTiddlerFn: function() {return self.to;},\\n\\t\\t\\twidget: this\\n\\t\\t});\\n\\t}\\n\\t// Insert the link into the DOM and render any children\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nLinkWidget.prototype.handleClickEvent = function(event) {\\n\\t// Send the click on its way as a navigate event\\n\\tvar bounds = this.domNodes[0].getBoundingClientRect();\\n\\tthis.dispatchEvent({\\n\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\tnavigateTo: this.to,\\n\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n\\t\\tnavigateFromNode: this,\\n\\t\\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\\n\\t\\t},\\n\\t\\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1)\\n\\t});\\n\\tif(this.domNodes[0].hasAttribute(\\\"href\\\")) {\\n\\t\\tevent.preventDefault();\\n\\t}\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nLinkWidget.prototype.execute = function() {\\n\\t// Pick up our attributes\\n\\tthis.to = this.getVariable(\\\"currentPrefix\\\", \\\"\\\") + this.getAttribute(\\\"to\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.tooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis[\\\"aria-label\\\"] = this.getAttribute(\\\"aria-label\\\");\\n\\tthis.linkClasses = this.getAttribute(\\\"class\\\");\\n\\tthis.tabIndex = this.getAttribute(\\\"tabindex\\\");\\n\\tthis.draggable = this.getAttribute(\\\"draggable\\\",\\\"yes\\\");\\n\\tthis.linkTag = this.getAttribute(\\\"tag\\\",\\\"a\\\");\\n\\t// Determine the link characteristics\\n\\tthis.isMissing = !this.wiki.tiddlerExists(this.to);\\n\\tthis.isShadow = this.wiki.isShadowTiddler(this.to);\\n\\tthis.hideMissingLinks = ($tw.wiki.getTiddlerText(MISSING_LINK_CONFIG_TITLE,\\\"yes\\\") === \\\"no\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nLinkWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.to || changedTiddlers[this.to] || changedAttributes[\\\"aria-label\\\"] || changedAttributes.tooltip || changedTiddlers[MISSING_LINK_CONFIG_TITLE]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.sublink = LinkWidget;\\n\\n})();\\n\"},\"$:/plugins/mklauber/SubStory/Template\":{\"title\":\"$:/plugins/mklauber/SubStory/Template\",\"created\":\"20170613230545399\",\"modified\":\"20180307211004525\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\\\\define root() $:/substory/$(currentTiddler)$/\\n\\\\define story() $:/temp/substory/$(currentTiddler)$/\\n\\\\define history() $:/temp/substory/$(currentTiddler)$/history\\n\\n<$list filter=\\\"[all[shadows+tiddlers]is[current]tag[SubStory]]\\\">\\n\\n<$set name=\\\"currentPrefix\\\" value=<<root>> >\\n<$navigator story=<<story>>  history=<<history>>>\\n\\n<$transclude />\\n\\n<$list filter=\\\"[list<story>]\\\" history=<<history>>  template=\\\"$:/plugins/mklauber/SubStory/ViewTemplate\\\" editTemplate=\\\"$:/core/ui/EditTemplate\\\" />\\n\\n</$navigator>\\n</$set>\\n</$list>\\n\"},\"$:/plugins/mklauber/SubStory/ViewTemplate\":{\"title\":\"$:/plugins/mklauber/SubStory/ViewTemplate\",\"created\":\"20170613200157145\",\"modified\":\"20170613233129935\",\"tags\":\"\",\"text\":\"\\\\define frame-classes()\\n tc-tiddler-view-frame $(missingTiddlerClass)$ $(shadowTiddlerClass)$ $(systemTiddlerClass)$ $(tiddlerTagClasses)$\\n\\\\end\\n\\\\define folded-state()\\n$:/state/folded/$(currentTiddler)$\\n\\\\end\\n\\\\define title-styles()\\nfill:$(foregroundColor)$;\\n\\\\end\\n\\\\define config-title()\\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\\n\\\\end\\n\\n<$set name=\\\"storyTiddler\\\" value=<<currentTiddler>>><$set name=\\\"tiddlerInfoState\\\" value=<<qualify \\\"$:/state/popup/tiddler-info\\\">>><$tiddler tiddler=<<currentTiddler>>><div class=<<frame-classes>>>\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\" state=<<tiddlerInfoState>> class=\\\"tc-tiddler-info tc-popup-handle\\\" animate=\\\"yes\\\" retain=\\\"yes\\\">\\n<$transclude tiddler=\\\"$:/core/ui/TiddlerInfo\\\"/>\\n</$reveal>\\n\\n<div class=\\\"tc-tiddler-title\\\">\\n<div class=\\\"tc-titlebar\\\">\\n<span class=\\\"tc-tiddler-controls\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]]\\\" variable=\\\"listItem\\\"><$reveal type=\\\"nomatch\\\" state=<<config-title>> text=\\\"hide\\\"><$transclude tiddler=<<listItem>>/></$reveal></$list>\\n</span>\\n<$set name=\\\"tv-wikilinks\\\" value={{$:/config/Tiddlers/TitleLinks}}>\\n<$link>\\n<$set name=\\\"foregroundColor\\\" value={{!!color}}>\\n<span class=\\\"tc-tiddler-title-icon\\\" style=<<title-styles>>>\\n<$transclude tiddler={{!!icon}}/>\\n</span>\\n</$set>\\n<$list filter=\\\"[all[current]removeprefix<currentPrefix>]\\\">\\n<h2 class=\\\"tc-title\\\" title={{$:/language/SystemTiddler/Tooltip}}>\\n<$text text=<<currentTiddler>>/>\\n</h2>\\n</$list>\\n<$list filter=\\\"[all[current]!prefix[$:/]]\\\">\\n<h2 class=\\\"tc-title\\\">\\n<$view field=\\\"title\\\"/>\\n</h2>\\n</$list>\\n</$link>\\n</$set>\\n</div>\\n\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\" state=<<tiddlerInfoState>> class=\\\"tc-tiddler-info tc-popup-handle\\\" animate=\\\"yes\\\" retain=\\\"yes\\\">\\n\\n<$transclude tiddler=\\\"$:/core/ui/TiddlerInfo\\\"/>\\n\\n</$reveal>\\n</div>\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]] -[[$:/core/ui/ViewTemplate/title]]\\\" variable=\\\"listItem\\\">\\n<$transclude tiddler=<<listItem>>/>\\n</$list>\\n</div>\\n</$tiddler></$set></$set>\\n\"},\"$:/plugins/mklauber/SubStory/readme\":{\"title\":\"$:/plugins/mklauber/SubStory/readme\",\"created\":\"20180309191333059\",\"hide-body\":\"yes\",\"modified\":\"20180309192220321\",\"tags\":\"SubStory\",\"text\":\"This plugin is designed to make it simpler to reuse titles between different areas within the same tiddlywiki.  \\n\\nTo create a subsection of a wiki tag the top level page with the tag <<tag SubStory>>, and set the field `hide-body` == `yes`.  Now, that tiddler will behave as if it was it's own story river.  Links clicked within the body of that text will show up within that tiddler, and you can use a new link format `[s[...]]` to have links to tiddlers that are automatically prefixed with `$:/substory/{tagged tiddler}/`.  \\n\\nTo see how this works, feel free to click the following:\\n\\n* [[GettingStarted]]\\n* [s[Example]]\\n\"}}}"}